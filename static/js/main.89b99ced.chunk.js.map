{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","cardsArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAgBeA,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAExB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA4BH,EAA5B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCWLK,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAETC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACjC,OAAO,kBAAC,EAAD,CACPC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAGrB,OACI,6BACKO,ICAEK,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKZ,UAAU,OACX,2BACAA,UAAU,gCACVa,KAAK,SACLC,YAAY,SACZC,SAAUH,MCCPI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCmBJC,E,kDArBX,WAAYN,GAAQ,IAAD,8BACf,cAAOA,IACFO,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SACD,CAAEJ,UAAS,M,+BAKf,OAAIG,KAAKJ,MAAMC,SACJ,uDAEJG,KAAKX,MAAMK,a,GAlBEQ,aC+CbC,G,wDA1CX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SAb1C,EAAKX,MAAQ,CACTpB,OAAQ,GACRO,YAAa,IAJP,E,gEAQO,IAAD,OAChByB,MAAM,8CACLC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAU,EAAKX,SAAS,CAAEzB,OAAQoC,S,+BAMlC,IAAD,EACyBZ,KAAKJ,MAA5BpB,EADF,EACEA,OAAQO,EADV,EACUA,YACT8B,EAAiBrC,EAAOsC,QAAO,SAAAC,GACjC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASlC,EAAYiC,kBAEzD,OAAsB,IAAlBxC,EAAO0C,OACA,uCAGX,yBAAK9C,UAAU,MACX,wBAAIA,UAAY,MAAhB,eACA,kBAAC,EAAD,CAAWY,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU5B,OAAQqC,W,GAhCpBX,cCMEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.89b99ced.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    \n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src = {`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    ); \n    \n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst Cardlist = ({robots}) => {\n   \n    const cardsArray = robots.map((user, i) => {\n        return <Card \n        key={i} \n        id={robots[i].id} \n        name={robots[i].name} \n        email={robots[i].email}\n        />\n    })\n    return (\n        <div>\n            {cardsArray}\n        </div>\n    );\n}\n\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n            className='pa3 b--green bg-lightest-blue'\n            type=\"search\" \n            placeholder=\"Search\" \n            onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super (props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState(\n            { hasError:true }\n        )\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>OOOps, That is no bueno</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport Cardlist from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css';\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchfield: '',\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => {return response.json();})\n        .then(users => {this.setState({ robots: users });})\n        \n    }\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value});\n    }\n    render() {\n        const {robots, searchfield} = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n        if (robots.length === 0) {\n            return <h1>Loading</h1>\n        } else {\n        return (\n        <div className='tc'> \n            <h1 className = 'f1'>RoboFriends</h1>\n            <SearchBox searchChange={this.onSearchChange}/>\n            <Scroll>\n                <ErrorBoundary>\n                    <Cardlist robots={filteredRobots} />\n                </ErrorBoundary> \n            </Scroll> \n            \n        </div>\n        );\n        }\n    }   \n    \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'; //its an extension with easy to use prebuilt css\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n     \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}